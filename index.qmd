---
title: "GAPMINDER DASHBOARD"
author: "Meron Asfaha"
format: dashboard
theme: lux
---

```{r echo = FALSE, message = FALSE}
# Load packages 
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, gapminder,
               bslib, bsicons, shiny, 
               rnaturalearth, plotly, 
               countrycode, htmltools, 
               reactable, stringr, janitor, 
               gganimate
               )
```

```{r echo = FALSE, message = FALSE}
# Read CSV files
basic_sanitation <- read_csv("data/at_least_basic_sanitation_overall_access_percent.csv")

newborn_mortality <- read_csv("data/newborn_deaths.csv")

newborn_mortality_rate <- read_csv("data/newborn_mortality_rate_per_1000.csv")

population_data <- read_csv("data/pop.csv")
```


```{r echo = FALSE, message = FALSE}
# Select only years with data across all datasets and pivot longer

basic_sanitation_clean <- basic_sanitation %>% 
  select("country", "2000":"2015") %>% 
  pivot_longer(cols = c("2000":"2015"), 
               names_to = "year", 
               values_to = "basic_sanitation") %>% 
  clean_names()

newborn_mortality_clean <- newborn_mortality %>% 
  select("country", "2000":"2015") %>% 
  pivot_longer(cols = c("2000":"2015"), 
               names_to = "year",
               values_to = "newborn_mortality") %>% 
  clean_names()

newborn_mortality_rate_clean <- newborn_mortality_rate %>% 
  select("country", "2000":"2015") %>% 
  pivot_longer(cols = c("2000":"2015"), 
               names_to = "year",
               values_to = "newborn_mortality_rate") %>% 
  clean_names()


population_data_clean <- population_data %>% 
  select("country", "2000":"2015") %>% 
  pivot_longer(cols = c("2000":"2015"), 
               names_to = "year",
               values_to = "population") %>% 
  clean_names()

```

```{r echo = FALSE, message = FALSE}
# Convert values with string suffixes to numeric - basic sanitation should not require this cleaning step but will run this just in case

# Define the function to clean the columns
clean_column <- function(df, column_name) {
  df %>%
    mutate(
      {{column_name}} := as.character({{column_name}}),
      {{column_name}} := str_replace_all({{column_name}}, "k", "e3"),
      {{column_name}} := str_replace_all({{column_name}}, "M", "e6"),
      {{column_name}} := str_replace_all({{column_name}}, "B", "e9"),
      {{column_name}} := as.numeric({{column_name}}),
      {{column_name}} := format({{column_name}}, scientific = FALSE),
    )
}

# Apply the function to the basic_sanitation_clean dataset
basic_sanitation_clean <- clean_column(basic_sanitation_clean, basic_sanitation)


# Apply the function to the newborn_mortality_clean dataset
newborn_mortality_clean <- clean_column(newborn_mortality_clean, newborn_mortality)

# Apply the function to the newborn_mortality_rate_clean dataset
newborn_mortality_rate_clean <- clean_column(newborn_mortality_rate_clean, newborn_mortality_rate)

# Apply the function to the population_data_clean dataset
population_data_clean <- clean_column(population_data_clean, population)

```


```{r echo = FALSE, message = FALSE}
# Country Name Standardization (conversion to ISO codes)

# Define the function to convert to ISO code
convert_iso <- function(df, column_name){
  df %>%
    mutate(country_code = countrycode(df[[column_name]], "country.name", "iso3c"))
}


# Apply the function to population data set
population_data_clean <- convert_iso(population_data_clean, "country")

# Apply the function to basic sanitation data set
basic_sanitation_clean <- convert_iso(basic_sanitation_clean, "country")

# Apply the function to the newborn_mortality_clean dataset
newborn_mortality_clean <- convert_iso(newborn_mortality_clean, "country")

# Apply the function to the newborn_mortality_rate_clean dataset
newborn_mortality_rate_clean <- convert_iso(newborn_mortality_rate_clean, "country")
```


```{r echo = FALSE, message = FALSE, eval=FALSE}
#Checking for typos, mismatches and gaps between datasets

anti_join(population_data_clean, basic_sanitation_clean, by = "country_code") #Holy See and Taiwan are in the population dataset but not in the basic sanitation dataset

anti_join(basic_sanitation_clean, population_data_clean, by = "country_code") #Aruba, American Samoa, Bermuda, Cayman Islands, Faeroe Islands, Isle of Man, Gibraltar, Greenland, Guam, Hong Kong, Liechtenstein, Macao, St. Martin, Northern Mariana Islands, New Caledonia, Curacao, Puerto Rico, French Polynesia, Sint Maarten, Turks and Caicos, British V.I. and US V.I. are in basic sanitation dataset but not in population data set

anti_join(basic_sanitation_clean, newborn_mortality_clean, by = "country_code") #Aruba, American Samoa, Bermuda, Cayman Islands, Faeroe Islands, Isle of Man, Gibraltar, Greenland, Guam, Hong Kong, Liechtenstein, Macao, St. Martin, Northern Mariana Islands, New Caledonia, Curacao, Puerto Rico, French Polynesia, Sint Maarten, Turks and Caicos, British V.I. and US V.I. are in basic sanitation dataset but not in newborn mortality dataset

anti_join(newborn_mortality_clean, basic_sanitation_clean, by = "country_code") #Cook Island and Nieu are in newborn mortality dataset but not in basic sanitation data set

anti_join(population_data_clean, newborn_mortality_clean, by = "country_code") #Hong Kong, Liechtenstein and Tawiwan are in population data set but not in newborn data set

anti_join(newborn_mortality_clean, population_data_clean, by = "country_code") #Cook Island and Nieu are in newborn dataset but not in population data set

anti_join(newborn_mortality_clean, newborn_mortality_rate_clean, by = "country_code") #no conflicts

anti_join(newborn_mortality_rate_clean, newborn_mortality_clean, by = "country_code") #no conflicts
```


```{r echo = FALSE, message = FALSE}
# Joining datasets

gap_finalproj_join1 <- left_join(population_data_clean, newborn_mortality_clean)

gap_finalproj_join2 <- left_join(gap_finalproj_join1, basic_sanitation_clean)

gap_finalproj_join3 <- left_join(gap_finalproj_join2, newborn_mortality_rate_clean)

```
```{r echo = FALSE, message = FALSE}
# Converting data types to numeric, error appears but all NAs seem to be appropriately converted to NA in R

gap_finalproj_final <- gap_finalproj_join3 %>% 
  mutate(newborn_mortality = as.numeric(newborn_mortality), 
         newborn_mortality_rate = as.numeric(newborn_mortality_rate),
         basic_sanitation = as.numeric(basic_sanitation),
         population = as.numeric(population))
 
```


```{r echo = FALSE, message = FALSE}
# Pulling information needed for value boxes - newborn mortality in 2015
highest_newborn_mortality_rate_country <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(-newborn_mortality_rate) %>% 
  head(1) %>% 
  pull(country)

highest_newborn_mortality_rate_value <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(-newborn_mortality_rate) %>% 
  head(1) %>% 
  pull(newborn_mortality_rate) %>% 
  format(scientific = FALSE)

highest_newborn_mortality_country <- gap_finalproj_final %>%
  filter(year=="2015") %>% 
  arrange(-newborn_mortality) %>% 
  head(1) %>% 
  pull(country)

highest_newborn_mortality_value <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(-newborn_mortality) %>% 
  head(1) %>% 
  pull(newborn_mortality) %>% 
  format(scientific = FALSE, big.mark = ",")

lowest_newborn_mortality_rate_country <- gap_finalproj_final %>%   filter(year=="2015") %>% 
  arrange(newborn_mortality_rate) %>% 
  head(1) %>% 
  pull(country)

lowest_newborn_mortality_rate_value <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(newborn_mortality_rate) %>% 
  head(1) %>% 
  pull(newborn_mortality_rate) %>% 
  format(scientific = FALSE)

```


```{r}
# Pulling information needed for value boxes - basic sanitation in 2015
highest_basic_sanitation_country <- gap_finalproj_final %>%
  filter(year=="2015") %>% 
  arrange(-basic_sanitation) %>% 
  head(1) %>% 
  pull(country)

highest_basic_sanitation_value <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(-basic_sanitation) %>% 
  head(1) %>% 
  pull(basic_sanitation) %>% 
  format(scientific = FALSE)

lowest_basic_sanitation_country <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(basic_sanitation) %>% 
  head(1) %>% 
  pull(country)

lowest_basic_sanitation_value <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(basic_sanitation) %>% 
  head(1) %>% 
  pull(basic_sanitation) %>% 
  format(scientific = FALSE)

```

```{r echo = FALSE, message = FALSE}

# Create map for newborn mortality rate

country_shapes <- rnaturalearth::ne_countries()

# Merge data
gap_finalproj_newborn_rate <- 
  left_join(country_shapes, gap_finalproj_final, 
          by = c("adm0_a3" = "country_code")) %>% 
  mutate(tooltip_label = paste(country, 
                               round(newborn_mortality_rate, 1), 
                               sep = ": "))

# Create the plot
  gap_finalproj_newborn_rate_plot <- ggplot(gap_finalproj_newborn_rate) + 
   geom_sf(aes(fill = newborn_mortality_rate, text = tooltip_label, frame = year), color = "black") + 
  geom_sf(data = country_shapes, fill = NA, color = "black") + 
  geom_sf(aes(fill = newborn_mortality_rate, text = tooltip_label, frame = year)) + 
  scale_fill_gradient(low = "#9ad1d0", high = "#2c5985", na.value="white") + 
  theme_void()+ 
  theme(legend.position = "none")
  
  
  # Convert ggplot to plotly and adjust layout
gap_map_ggplotly_newborn_rate <- ggplotly(gap_finalproj_newborn_rate_plot, tooltip = "text") %>%
  layout(
    autosize = TRUE,
    margin = list(l = 10, r = 10, b = 10, t = 10)  # Narrow margins
  ) %>%
  animation_opts(frame = 100, transition = 0, redraw = FALSE) %>%
  animation_slider(currentvalue = list(prefix = "Year: "))


```


```{r echo = FALSE, message = FALSE}

country_shapes <- rnaturalearth::ne_countries()

# Merge data
gap_finalproj_basic_sanitation <- 
  left_join(country_shapes, gap_finalproj_final, 
            by = c("adm0_a3" = "country_code")) %>% 
  mutate(tooltip_label = paste(country, 
                               round(basic_sanitation, 1), 
                               sep = ": "))

# Create the plot
gap_finalproj_basic_sanitation_plot <- ggplot(gap_finalproj_basic_sanitation) + 
  geom_sf(aes(fill = basic_sanitation, text = tooltip_label, frame = year), color = "black") + 
  geom_sf(data = country_shapes, fill = NA, color = "black") + 
  scale_fill_gradient(low = "#41b7c4", high = "#feffd9", na.value = "white") + 
  theme_void() + 
  theme(legend.position = "none")

# Convert ggplot to plotly and adjust layout
gap_map_ggplotly_basic_sanitation <- ggplotly(gap_finalproj_basic_sanitation_plot, tooltip = "text") %>%
  layout(
    autosize = TRUE,
    margin = list(l = 10, r = 10, b = 10, t = 10)  # Narrow margins
  ) %>%
  animation_opts(frame = 100, transition = 0, redraw = FALSE) %>%
  animation_slider(currentvalue = list(prefix = "Year: "))


```


```{r echo = FALSE, message = FALSE}

# Create bar chart for top 20 countries with highest newborn mortality rate in most recent year of reportable data (2015)
top_20_countries_newborn_rate <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(desc(newborn_mortality_rate)) %>% 
  head(20) %>% 
  mutate(tooltip_label = paste(country, 
                               round(newborn_mortality_rate, 1), 
                               sep = ": ")) %>% 
  ggplot(aes(y = reorder(country, newborn_mortality_rate), 
             x = newborn_mortality_rate, 
             fill = newborn_mortality_rate, 
             text = tooltip_label)) + 
  geom_col() + 
  geom_text(aes(label = round(newborn_mortality_rate, 1)), 
            nudge_x = -10, 
            color = "white"
            ) + 
  scale_fill_gradient(low = "#9ad1d0", high = "#2c5985") + 
  labs(y = "Country", 
       x = "Newborn Mortality Rate") + 
  theme(legend.position = "none")

top_20_countries_ggplotly_newborn_rate <- 
  ggplotly(top_20_countries_newborn_rate, tooltip = "text")
```

```{r echo = FALSE, message = FALSE}
# Create bar chart for lowest 20 countries with people using basic sanitation 
lowest_20_countries_basic_sanitation <- gap_finalproj_final %>% 
  filter(year=="2015") %>% 
  arrange(basic_sanitation) %>% 
  head(20) %>% 
  mutate(tooltip_label = paste(country, 
                               round(basic_sanitation, 1), 
                               sep = ": ")) %>% 
  ggplot(aes(y = reorder(country, -basic_sanitation), 
             x = basic_sanitation, 
             fill = basic_sanitation, 
             text = tooltip_label)) + 
  geom_col() + 
  geom_text(aes(label = round(basic_sanitation, 1)), 
            nudge_x = -5, 
            color = "black"
            ) + 
  scale_fill_gradient(low = "#41b7c4", high = "#feffd9") + 
  labs(y = "Country", 
       x = "% of People Using Basic Sanitation") + 
  theme(legend.position = "none")

lowest_20_countries_ggplotly_basic_sanitation <- 
  ggplotly(lowest_20_countries_basic_sanitation, tooltip = "text")
```



# NEWBORN MORTALITY

## Row 1 {height=28%}

```{r}
value_box(
  title = "Lowest Newborn Mortality Rate (2015)",
  value = lowest_newborn_mortality_rate_value,
  showcase = bsicons::bs_icon("graph-down"),
  theme = value_box_theme(bg = "#9ad1d0"),
  p(paste0("(", lowest_newborn_mortality_rate_country, ")"))
)
```

```{r} 
value_box(
  title = "Highest Newborn Mortality Rate (2015)",
  value = highest_newborn_mortality_rate_value,
  showcase = bsicons::bs_icon("graph-up"),
  theme = value_box_theme(bg = "#41b7c4"),
  p(paste0("(", highest_newborn_mortality_rate_country, ")"))
)
```


```{r}
value_box(
  title = "Highest Total Newborn Deaths (2015)",
  value = highest_newborn_mortality_value,
  showcase = bsicons::bs_icon("file-earmark-medical"),
  theme = value_box_theme(bg = "#2c5985"),
   p(paste0("(", highest_newborn_mortality_country, ")"))
)
```

## Row 2 {height=72%}

### {width=40%}

```{r title = "Top 20 Countries by Newborn Mortality Rate (2015)"}
top_20_countries_ggplotly_newborn_rate
```


### {width=60%}

```{r title = "Map of Countries by Newborn Mortality Rate (2000 - 2015)"}
gap_map_ggplotly_newborn_rate
```

# BASIC SANITATION

## Row 1 {height=28%}

```{r}
value_box(
  title = "Lowest % of People Using Basic Sanitation (2015)",
  value = lowest_basic_sanitation_value,
  showcase = bsicons::bs_icon("graph-down"),
  theme = value_box_theme(bg = "#feffd9"),
  p(paste0("(", lowest_basic_sanitation_country, ")"))
)
```


```{r} 
value_box(
  title = "Highest % of People Using Basic Sanitation (2015)",
  value = highest_basic_sanitation_value,
  showcase = bsicons::bs_icon("graph-up"),
  theme = value_box_theme(bg = "#41b7c4"),
  p(paste0("(", highest_newborn_mortality_rate_country, ")"))
)
```

## Row 2 {height=72%}

### {width=40%}


```{r title = "Lowest 20 Countries with People Using Basic Sanitation (2015)"}
lowest_20_countries_ggplotly_basic_sanitation
```


### {width=60%}

```{r title = "Map of Countries by % of People Using Basic Sanitation Over Time (2000 - 2015)"}
gap_map_ggplotly_basic_sanitation
```
# DOWNLOAD DATA

The data used in this dashboard is shown below and can be downloaded as a CSV. 

```{r}
# Creating browsable reactable table for download

gap_finalproj_final_download <- gap_finalproj_final %>% 
  select("country", "country_code", "year", "population", "newborn_mortality", "newborn_mortality_rate", "basic_sanitation")


library(htmltools)

htmltools::browsable(
  tagList(
    reactable(gap_finalproj_final_download, 
              elementId = "gapminder-table", 
              searchable = T, 
              filterable = T), 
    
tags$button("Download as CSV", 
            onclick = "Reactable.downloadDataCSV('gapminder-table')")
  )
)
```

# ABOUT

This data comes from the Gapminder Foundation. 

The Gapminder Foundation is a non-profit venture registered in Stockholm, Sweden, that promotes sustainable global development and achievement of the United Nations Millennium Development Goals by increased use and understanding of statistics and other information about social, economic, and environmental development at local, national, and global levels.

Gapminder was founded in 2005 by Ola Rosling, Anna Rosling Rönnlund, and Hans Rosling. The name Gapminder was derived from the "Mind the Gap" warning messages on the London Underground.

Neonatal mortality rate data captures children dying within the first 28 days per 1000 live births.
source_url:https://www.childmortality.org/

Newborn mortality (deaths) captures neonatal deaths (children dying within the first 28 days).
source_url:https://www.childmortality.org/

Basic sanitation data captures the percentage of people using at least basic sanitation services, that is, improved sanitation facilities that are not shared with other households. This indicator encompasses both people using basic sanitation services as well as those using safely managed sanitation services. Improved sanitation facilities include flush/pour flush to piped sewer systems, septic tanks or pit latrines; ventilated improved pit latrines, compositing toilets or pit latrines with slabs.
source_url:https://data.worldbank.org/indicator/SH.STA.ACSN


